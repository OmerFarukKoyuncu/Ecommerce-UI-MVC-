@using ANK19_ETicaretMVC.Areas.Admin.Models
@using ANK19_ETicaretMVC.Areas.Admin.Models.OrderReport
@model IEnumerable<OrderCustomerReportViewModel>
@{
    ViewData["Title"] = "Order Product Report";
    Layout = "~/Views/Shared/_AdminLayoutReport.cshtml";
}
<main class="col-md-9 ms-sm-auto col-lg-10 px-md-4">
    <div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom">
        <h1 class="h2">Customer Purchase Report</h1>
    </div>

    <!-- Charts Section -->
    <div class="row mb-4">

        <div class="col-md-6">
            <canvas id="salesChart"></canvas>
        </div>
    </div>

    <!-- Table -->
    <div class="table-responsive">
        <table class="table table-striped table-bordered">
            <thead class="table-dark">
                <tr>
                     
                  
                    <th>Customer First Name</th>
                    <th>Customer Last Name</th>
                    <th>Customer Username</th>
                    <th>Total Quantity</th>
                    <th>Total Price</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model)
                {
                    <tr>
                     
                        <td>@Html.DisplayFor(modelItem => item.UserFirstName)</td>
                        <td>@Html.DisplayFor(modelItem => item.UserLastName)</td>
                        <td>@Html.DisplayFor(modelItem => item.UserName)</td>
                        <td>@Html.DisplayFor(modelItem => item.TotalQuantity)</td>
                        <td>@Html.DisplayFor(modelItem => item.TotalPrice)</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</main>
<script>

    function getTokenFromCookie() {
        // Tüm çerezleri al
        const cookies = document.cookie;
        console.log(cookies);
        // Çerezi "JwtToken" anahtarına göre bul ve değerini al
        const token = cookies
            .split('; ')
            .find(row => row.startsWith('JwtToken='))
            ?.split('=')[1]; // Çerezin değerini al

        if (!token) {
            console.error('Token bulunamadı.');
            return null;
        }

        return token; // Token'ı döndür
    }


    async function fetchData() {
        const token = await getTokenFromCookie(); // Fetch token from the server

        if (!token) {
            console.error('JWT token alınamadı. Lütfen giriş yapın.');
            alert('JWT token eksik. Lütfen giriş yapın.');
            return [];
        }



        try {
            const response = await fetch('https://ank19-eticaret20250206213111.azurewebsites.net/api/Admin/OrderReport/GetOrderCustomerReports', {
                method: 'GET',
                headers: {
                    'Authorization': `Bearer ${token}`, // JWT token'ı Authorization başlığına ekle
                    'Content-Type': 'application/json'
                }
            });

            if (!response.ok) {
                throw new Error(`HTTP error! Status: ${response.status}`);
            }

            const data = await response.json();
            console.log(data); // Gelen JSON verisini kontrol etmek için
            return data;
        } catch (error) {
            console.error('Veri alınırken hata oluştu:', error);
            alert('Veri alınırken bir hata oluştu. Lütfen tekrar deneyin.');
            return [];
        }
    }

    function prepareCharts(data) {
        // Group purchases by customers
        const customerPurchases = {};

        data.forEach(item => {
            const customerName = `${item.userFirstName} ${item.userLastName}` || 'Unknown Customer';
            if (!customerPurchases[customerName]) {
                customerPurchases[customerName] = {
                    totalQuantity: 0,
                    totalPrice: 0
                };
            }
            customerPurchases[customerName].totalQuantity += item.totalQuantity || 0;
            customerPurchases[customerName].totalPrice += item.totalPrice || 0;
        });

        // Extract data for chart
        const customerLabels = Object.keys(customerPurchases);
        const quantityData = customerLabels.map(label => customerPurchases[label].totalQuantity);
        const priceData = customerLabels.map(label => customerPurchases[label].totalPrice);

        // Chart for Total Quantity
        const salesCtx = document.getElementById('salesChart').getContext('2d');
        new Chart(salesCtx, {
            type: 'bar',
            data: {
                labels: customerLabels,
                datasets: [
                    {
                        label: 'Total Quantity',
                        data: quantityData,
                        backgroundColor: '#007bff'
                    },
                    {
                        label: 'Total Price',
                        data: priceData,
                        backgroundColor: '#ffc107'
                    }
                ]
            },
            options: {
                responsive: true,
                plugins: {
                    legend: {
                        position: 'top',
                    },
                    title: {
                        display: true,
                        text: 'Customer Purchases'
                    }
                },
                scales: {
                    x: {
                        title: {
                            display: true,
                            text: 'Customers'
                        }
                    },
                    y: {
                        title: {
                            display: true,
                            text: 'Values'
                        }
                    }
                }
            }
        });
    }


    // Verileri çek ve grafikleri hazırla
    fetchData().then(data => {
        if (data.length > 0) {
            prepareCharts(data);
        } else {
            console.warn('Grafikler için yeterli veri bulunamadı.');
        }
    });
</script>



<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/js/bootstrap.bundle.min.js"></script>


