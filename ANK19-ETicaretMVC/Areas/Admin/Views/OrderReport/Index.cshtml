@using ANK19_ETicaretMVC.Areas.Admin.Models.OrderReport
@using ANK19_ETicaretMVC.Areas.Admin.Models
@model IEnumerable<OrderProductReportViewModel>
@{
    ViewData["Title"] = "Order Product Report";
    Layout = "~/Views/Shared/_AdminLayoutReport.cshtml";
}
<main class="col-md-9 ms-sm-auto col-lg-10 px-md-4">
    <div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom">
        <h1 class="h2">Order Product Report</h1>
    </div>

    <!-- Charts Section -->
    <div class="row mb-4">
         
        <div class="col-md-6">
            <canvas id="salesChart"></canvas>
        </div>
    </div>

    <!-- Table -->
    <div class="table-responsive">
        <table class="table table-striped table-bordered">
            <thead class="table-dark">
                <tr>
                    <th>Order ID</th>
                    <th>Status</th>
                    <th>Order Date</th>
                    <th>Product Name</th>
                    <th>Description</th>
                    <th>Quantity</th>
                    <th>Total Price</th>
                    <th>Seller Name</th>
                    <th>Customer First Name</th>
                    <th>Customer Last Name</th>
                    <th>Customer Username</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model)
                {
                    <tr>
                        <td>@Html.DisplayFor(modelItem => item.OrderId)</td>
                        <td>@Html.DisplayFor(modelItem => item.Status)</td>
                        <td>@Html.DisplayFor(modelItem => item.OrderDate)</td>
                        <td>@Html.DisplayFor(modelItem => item.ProductName)</td>
                        <td>@Html.DisplayFor(modelItem => item.Description)</td>
                        <td>@Html.DisplayFor(modelItem => item.Quantity)</td>
                        <td>@Html.DisplayFor(modelItem => item.Price)</td>
                        <td>@Html.DisplayFor(modelItem => item.SellerName)</td>
                        <td>@Html.DisplayFor(modelItem => item.UserFirstName)</td>
                        <td>@Html.DisplayFor(modelItem => item.UserLastName)</td>
                        <td>@Html.DisplayFor(modelItem => item.UserName)</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</main>
<script>

    function getTokenFromCookie() {
        // Tüm çerezleri al
        const cookies = document.cookie;
        console.log(cookies);
        // Çerezi "JwtToken" anahtarına göre bul ve değerini al
        const token = cookies
            .split('; ')
            .find(row => row.startsWith('JwtToken='))
            ?.split('=')[1]; // Çerezin değerini al

        if (!token) {
            console.error('Token bulunamadı.');
            return null;
        }

        return token; // Token'ı döndür
    }


    async function fetchData() {
        const token = await getTokenFromCookie(); // Fetch token from the server

        if (!token) {
            console.error('JWT token alınamadı. Lütfen giriş yapın.');
            alert('JWT token eksik. Lütfen giriş yapın.');
            return [];
        }

       

        try {
            const response = await fetch('https://ank19-eticaret20250206213111.azurewebsites.net/api/Admin/OrderReport/GetOrderProductReports', {
                method: 'GET',
                headers: {
                    'Authorization': `Bearer ${token}`, // JWT token'ı Authorization başlığına ekle
                    'Content-Type': 'application/json'
                }
            });

            if (!response.ok) {
                throw new Error(`HTTP error! Status: ${response.status}`);
            }

            const data = await response.json();
            console.log(data); // Gelen JSON verisini kontrol etmek için
            return data;
        } catch (error) {
            console.error('Veri alınırken hata oluştu:', error);
            alert('Veri alınırken bir hata oluştu. Lütfen tekrar deneyin.');
            return [];
        }
    }

    function prepareCharts(data) {
        const statusMapping = {
            0: 'Preparing',
            1: 'Shipped',
            2: 'Cancelled',
            3: 'Completed'
        };

        // Sipariş Durumu Dağılımı
        const statusCounts = {};
        data.forEach(item => {
            const status = statusMapping[item.status] || 'Unknown';
            statusCounts[status] = (statusCounts[status] || 0) + 1;
        });

        const statusLabels = Object.keys(statusCounts);
        const statusData = Object.values(statusCounts);

        // Ürün Satış Dağılımı
        const productSales = {};
        data.forEach(item => {
            const productName = item.productName || 'Unknown Product';
            productSales[productName] = (productSales[productName] || 0) + item.quantity;
        });

        const productLabels = Object.keys(productSales);
        const productData = Object.values(productSales);

        

        // Ürün Satış Grafiği
        const salesCtx = document.getElementById('salesChart').getContext('2d');
        new Chart(salesCtx, {
            type: 'pie',
            data: {
                labels: productLabels,
                datasets: [{
                    label: 'Sales',
                    data: productData,
                    backgroundColor: ['#ffc107', '#17a2b8', '#6c757d', '#20c997', '#dc3545']
                }]
            },
            options: {
                responsive: true,
                plugins: {
                    legend: {
                        position: 'top',
                    },
                    title: {
                        display: true,
                        text: 'Sales by Product'
                    }
                }
            }
        });
    }

    // Verileri çek ve grafikleri hazırla
    fetchData().then(data => {
        if (data.length > 0) {
            prepareCharts(data);
        } else {
            console.warn('Grafikler için yeterli veri bulunamadı.');
        }
    });
</script>



    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/js/bootstrap.bundle.min.js"></script>
 
 
